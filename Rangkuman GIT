<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Rangkuman Materi GIT</title>
</head>
<body>
  <h1>GIT-INTRO</h1>
    <h2>Apa Itu Git ?</h2>
    <p>Git adalah sistem kontrol versi yang populer yang digunakan 
      untuk melacak perubahan pada kode sumber perangkat lunak. 
      Git memungkinkan pengembang untuk bekerja secara kolaboratif, 
      melacak versi kode, dan mengelola riwayat perubahan dengan efisien.</p>
    <h2>Manfaat Git</h2>
    <dl>
      <dt>Kontrol Versi</dt>
      <dd>Repository adalah tempat penyimpanan proyek yang menggunakan Git. 
        Ini berisi semua file, folder, dan riwayat perubahan.</dd>
      <dt>Kolaborasi</dt>
      <dd>Dengan Git, tim pengembang dapat bekerja secara bersamaan pada proyek yang sama. 
        Git memfasilitasi penggabungan (merge) perubahan yang dilakukan oleh 
        anggota tim ke dalam satu versi yang utuh.</dd>
      <dt>Pemisahan Lingkungan</dt>
      <dd>Setiap anggota tim dapat bekerja di lingkungan terpisah dengan cabang (branch) sendiri.
        Ini memungkinkan pengembangan fitur atau eksperimen tanpa mempengaruhi kode
          yang sedang dikerjakan oleh orang lain.</dd>    
      <dt>Rekam Riwayat Perubahan</dt>
      <dd>Git mencatat setiap perubahan yang terjadi pada kode, mencakup informasi 
        tentang siapa yang melakukan perubahan, kapan, dan mengapa. 
        Ini memberikan visibilitas dan pelacakan yang lebih baik pada evolusi kode sumber.</dd> 
      <br>         
    </dl>
  <h1>GIT-FUNDAMENTAL</h1>
    <h2>Perintah Dasar GIT</h2>
    <h2>
      <ol>
        <li>Git init</li>
        <li>Git config</li>
        <li>Git status</li>
        <li>Git add .</li>
        <li>Git log</li>
        <li>Git commit</li>
        <li>Git clone</li>
        <li>Git push</li>
        <li>Git remote</li>
        <li>Git pull</li>
      </ol>
    </h2>
    <h2>Tentang Perintah Dasar GIT</h2>
    <dl>
      <dt>Git Init</dt>
      <dd>git init adalah perintah yang digunakan untuk menginisialisasi sebuah repositori Git baru di dalam direktori kerja. Dengan menggunakan git init, kamu dapat membuat repositori kosong yang siap untuk melacak dan mengelola perubahan pada kode sumber proyekmu.

        Saat menjalankan perintah git init, Git akan membuat direktori .git di dalam direktori kerja. Direktori ini berisi semua data yang diperlukan oleh Git untuk melacak perubahan, termasuk riwayat perubahan (commit), cabang (branch), dan konfigurasi repositori.</dd>
      <dt>Git config</dt>
      <dd>git config adalah perintah yang digunakan untuk mengatur konfigurasi pengguna pada repositori Git.
         Dengan git config, kamu dapat mengatur nama pengguna, alamat email, preferensi format tampilan, 
         dan banyak pengaturan lainnya yang berkaitan dengan penggunaan Git.
        Pengaturan email :
        1.git config --local user.email "your-email@example.com"
        2.git config --local user.name "Your Name"
        Pengaturan username :
        1.git config --global user.email "your-email@example.com"
        2.git config --global user.name "Your Name"
        </dd>
      <dt>Git Status</dt>
      <dd>`git status` adalah perintah yang digunakan dalam Git untuk menampilkan status saat ini 
        dari repositori kerja. Ketika menjalankan `git status`, Git akan memberikan informasi tentang
         perubahan yang terjadi pada file-file di direktori kerja, termasuk perubahan 
         yang belum ditambahkan ke area stage (untracked),
         perubahan yang sudah ditambahkan ke area stage (staged), serta perubahan yang sudah dicommit 
         (committed). Perintah ini juga akan memberikan informasi tentang branch saat ini, 
         perubahan yang belum di-commit, dan pesan-pesan yang mungkin membantu dalam mengelola 
         repositori. Dengan `git status`, kamu dapat dengan cepat melihat status saat ini 
         dan memastikan bahwa perubahan yang diperlukan telah ditangani dengan benar 
         sebelum melakukan commit atau operasi Git lainnya.</dd>    
      <dt>Git add .</dt>
      <dd>`git add .` adalah perintah yang digunakan untuk menambahkan semua perubahan yang ada
         di direktori kerja ke dalam area stage (stage area) dalam Git dengan satu perintah.</dd> 
      <dt>Git log</dt>
      <dd>`git log` digunakan untuk melihat riwayat commit pada repositori Git.</dd>
      <dt>Git commit</dt>
      <dd>`git commit` digunakan untuk membuat commit (menyimpan perubahan) pada repositori Git.
        Berikut adalah contoh penggunaan perintah git commit:
        git commit -m "Add new feature"
      </dd> 
      <dt>Git clone</dt>
      <dd>`git clone` digunakan untuk menduplikasi repositori Git yang ada ke dalam direktori kerja lokal.
      </dd> 
      <dt>Git push</dt>
      <dd>`git push` digunakan untuk mengirimkan (mengunggah) perubahan lokal yang telah di-commit ke repositori jarak jauh (remote repository) yang terhubung.
      </dd> 
      <dt>Git remote</dt>
      <dd>`git remote` digunakan untuk menampilkan daftar remote repository yang terhubung dengan repositori lokal.</dd>
      <dt>Git pull</dt>
      <dd>`git pull` digunakan untuk mengambil (menggabungkan) perubahan terbaru dari remote repository ke repositori lokal.</dd>  
      <br>         
    </dl>
  
  <h1>GIT BRANCH</h1>
  <h2>Apa Itu Branch ?</h2>
  <p>Branch dalam Git adalah sebuah cabang yang terpisah dari riwayat commit utama (master) yang memungkinkan pengembang untuk bekerja pada fitur, perbaikan bug, atau percobaan eksperimental tanpa mengganggu atau mempengaruhi riwayat commit utama. Setiap branch memiliki versi commit yang berbeda, yang memungkinkan pengembang untuk bekerja secara terisolasi dan kemudian menggabungkan perubahan tersebut ke dalam branch utama.</p>
  <h2>Apa Manfaat Branch ?</h2>
  <p>Manfaat dari penggunaan branch dalam Git adalah sebagai berikut:

    Pengembangan Paralel: Branch memungkinkan tim pengembang untuk bekerja pada fitur atau tugas yang berbeda secara paralel. Setiap anggota tim dapat membuat branch sendiri-sendiri untuk mengembangkan fitur atau menyelesaikan tugas tertentu tanpa saling mengganggu. Hal ini meningkatkan efisiensi dan fleksibilitas dalam pengembangan perangkat lunak.

    Pemisahan Perubahan: Dengan menggunakan branch, pengembang dapat membuat perubahan pada kode sumber yang tidak langsung mempengaruhi branch utama. Ini memungkinkan pengembang untuk eksperimen, melakukan perbaikan bug, atau menguji fitur baru tanpa mempengaruhi stabilitas branch utama.

    Isolasi Bug: Jika bug ditemukan pada branch utama, pengembang dapat membuat branch terpisah dari titik sebelum bug terjadi dan fokus untuk menyelesaikan bug tersebut. Dengan cara ini, perbaikan bug tidak akan mengganggu pengembangan fitur lainnya yang sedang berlangsung.

    Pengujian dan Review: Branch memungkinkan pengembang untuk melakukan pengujian dan review kode secara terpisah sebelum menggabungkan perubahan ke branch utama. Ini membantu memastikan bahwa perubahan yang diusulkan telah diuji dan diverifikasi sebelum dimasukkan ke dalam produksi.

    Versi dan Pemulihan: Setiap branch memiliki versi commit yang berbeda, yang memungkinkan pemulihan ke versi sebelumnya jika diperlukan. Jika perubahan yang dilakukan di branch menghasilkan hasil yang tidak diinginkan, pengembang dapat kembali ke titik sebelum perubahan tersebut dengan mudah.</p>
  <h2>Macam-Macam Perintah GIT BRANCH</h2>
  <p>
    Berikut adalah beberapa perintah branch dalam Git beserta fungsinya masing-masing dalam satu kalimat:

    1. `git branch`: Digunakan untuk melihat daftar branch yang ada dalam repositori. 
    2. `git branch <branch-name>`: Digunakan untuk membuat branch baru dengan nama tertentu.
    3. `git branch -d <branch-name>`: Digunakan untuk menghapus branch yang telah selesai atau tidak lagi diperlukan.
    4. `git branch -m <branch-name>`: Digunakan untuk mengubah nama branch.
    5. `git branch -r`: Digunakan untuk melihat daftar branch jarak jauh (remote branches).
    6. `git branch -a`: Digunakan untuk melihat daftar semua branch, baik lokal maupun jarak jauh.
    7. `git branch -v`: Digunakan untuk melihat daftar branch beserta commit terakhir di setiap branch.
    8. `git checkout <branch-name>`: Digunakan untuk beralih ke branch yang sudah ada.
    9. `git checkout -b <branch-name>`: Digunakan untuk membuat branch baru dan beralih ke branch tersebut.
    10. `git merge <branch-name>`: Digunakan untuk menggabungkan perubahan dari branch lain ke branch saat ini.
    11. `git rebase <branch-name>`: Digunakan untuk menggabungkan perubahan dari branch lain ke branch saat ini dengan menggunakan rebase.
    12. `git cherry-pick <commit>`: Digunakan untuk memilih commit tertentu dan menerapkan perubahan dari commit tersebut ke branch saat ini.

    Perintah-perintah di atas memungkinkan pengguna Git untuk membuat, menghapus, beralih, menggabungkan, dan melihat daftar branch dalam repositori, sehingga memungkinkan pengembangan yang terorganisir dan kolaboratif pada berbagai fitur dan percobaan.
  </p>

  <h2>Tentang Conflict></h2>
  <p>Konflik dalam konteks Git terjadi ketika ada perbedaan antara dua atau lebih cabang (branch) yang sedang digabungkan. Hal ini terjadi ketika perubahan yang dilakukan di satu cabang bertentangan dengan perubahan yang dilakukan di cabang lain pada bagian yang sama dari sebuah file. Ketika Git menghadapi konflik, ia tidak dapat secara otomatis memutuskan perubahan mana yang harus diterima atau ditolak. Sebagai gantinya, Git memberikan pesan konflik dan menandai file yang konflik sehingga pengguna dapat memperbaikinya secara manual. Pengguna kemudian harus mengedit file secara manual, memilih bagian mana yang harus disimpan dan membuang bagian lainnya. Setelah mengatasi konflik, pengguna harus menandai file yang telah diperbaiki sebagai resolved, kemudian melanjutkan proses penggabungan (merge) atau commit. Konflik merupakan bagian normal dalam kolaborasi pengembangan perangkat lunak dengan Git dan dapat diatasi melalui komunikasi dan pemecahan masalah antara tim pengembang yang terlibat.</p>
  
</body>
</html>
